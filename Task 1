{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNJWMLh9mUHfPReJZiI5BLe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harini-buildon/machine-learning-/blob/main/Untitled.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "DAcWw9k3cDp0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ff05e41-5db8-4c41-91e0-7f2a8facf4de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Data:\n",
            "\n",
            "     Sky AirTemp Humidity    Wind Water Forecast EnjoySport\n",
            "0  Sunny    Warm   Normal  Strong  Warm     Same        Yes\n",
            "1  Sunny    Warm     High  Strong  Warm     Same        Yes\n",
            "2  Rainy    Cold     High  Strong  Warm   Change         No\n",
            "3  Sunny    Warm     High  Strong  Cool   Change        Yes\n",
            "Updated hypothesis after training example 1: ['Sunny', 'Warm', 'Normal', 'Strong', 'Warm', 'Same']\n",
            "Updated hypothesis after training example 2: ['Sunny', 'Warm', '?', 'Strong', 'Warm', 'Same']\n",
            "Updated hypothesis after training example 4: ['Sunny', 'Warm', '?', 'Strong', '?', '?']\n",
            "\n",
            "Final Hypothesis:\n",
            "['Sunny', 'Warm', '?', 'Strong', '?', '?']\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-923533786.py:18: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  if data.iloc[i][-1] == \"Yes\":  # Only consider positive examples\n",
            "/tmp/ipython-input-923533786.py:21: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  hypothesis[j] = data.iloc[i][j]  # First positive example\n",
            "/tmp/ipython-input-923533786.py:22: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  elif hypothesis[j] != data.iloc[i][j]:\n"
          ]
        }
      ],
      "source": [
        "# FIND-S Algorithm Implementation\n",
        "import pandas as pd\n",
        "# Step 1: Create dataset\n",
        "data = pd.DataFrame([\n",
        "    ['Sunny', 'Warm', 'Normal', 'Strong', 'Warm', 'Same', 'Yes'],\n",
        "    ['Sunny', 'Warm', 'High', 'Strong', 'Warm', 'Same', 'Yes'],\n",
        "    ['Rainy', 'Cold', 'High', 'Strong', 'Warm', 'Change', 'No'],\n",
        "    ['Sunny', 'Warm', 'High', 'Strong', 'Cool', 'Change', 'Yes']\n",
        "],\n",
        "columns=['Sky', 'AirTemp', 'Humidity', 'Wind', 'Water', 'Forecast',\n",
        "'EnjoySport'])\n",
        "print(\"Training Data:\\n\")\n",
        "print(data)\n",
        "# Step 2: Initialize hypothesis as the most specific\n",
        "hypothesis = ['0'] * (len(data.columns) - 1)\n",
        "# Step 3: Apply FIND-S\n",
        "for i in range(len(data)):\n",
        "    if data.iloc[i][-1] == \"Yes\":  # Only consider positive examples\n",
        "        for j in range(len(hypothesis)):\n",
        "            if hypothesis[j] == '0':\n",
        "                hypothesis[j] = data.iloc[i][j]  # First positive example\n",
        "            elif hypothesis[j] != data.iloc[i][j]:\n",
        "                hypothesis[j] = '?'  # Generalize if different\n",
        "        print(f\"Updated hypothesis after training example {i+1}: {hypothesis}\")\n",
        "print(\"\\nFinal Hypothesis:\")\n",
        "print(hypothesis)"
      ]
    }
  ]
}
